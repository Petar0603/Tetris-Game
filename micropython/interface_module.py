SHAPE_AND_NUMBER_SIZE = 24
SHAPE_START = 4
SHAPE_END = 28
DIGITS_START = 56

YELLOW_SCREEN_START = [
0x00, 0x00, 0xFE, 0x7F, 0x02, 0x40, 0x02, 0x40,
0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 
0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 
0x02, 0x40, 0x02, 0x40, 0xFE, 0x7F, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x30, 0x0C, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 
0x06, 0x60, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 
0xFE, 0x7F, 0xFE, 0x7F, 0x00, 0x00, 0x00, 0x00, 
0x7E, 0x1E, 0x7E, 0x1E, 0x80, 0x61, 0x80, 0x61, 
0x80, 0x61, 0x80, 0x61, 0xFE, 0x7F, 0xFE, 0x7F, 
0x00, 0x00, 0x00, 0x00, 0xF8, 0x1F, 0xF8, 0x1F, 
0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 
0xF8, 0x1F, 0xF8, 0x1F, 0x00, 0x00, 0x00, 0x00, 
0x18, 0x18, 0x18, 0x18, 0x06, 0x60, 0x06, 0x60, 
0x06, 0x60, 0x06, 0x60, 0xF8, 0x1F, 0xF8, 0x1F, 
0x00, 0x00, 0x00, 0x00, 0x78, 0x18, 0x78, 0x18, 
0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 
0x86, 0x61, 0x86, 0x61, 0x38, 0x1E, 0x38, 0x1E 
]

NUMBERS_SYMBOLS = [
[0x00, 0x00, 0xF8, 0x1F, 0xF8, 0x1F, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0xF8, 0x1F, 0xF8, 0x1F, 0x00, 0x00], # 0
[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0x06, 0x60, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], # 1
[0x00, 0x00, 0x06, 0x18, 0x06, 0x18, 0x06, 0x66, 0x06, 0x66, 0x86, 0x61, 0x86, 0x61, 0x66, 0x60, 0x66, 0x60, 0x1E, 0x18, 0x1E, 0x18, 0x00, 0x00], # 2
[0x00, 0x00, 0x78, 0x1E, 0x78, 0x1E, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00], # 3
[0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0x60, 0x18, 0x60, 0x18, 0x60, 0x06, 0x60, 0x06, 0xE0, 0x01, 0xE0, 0x01, 0x00, 0x00], # 4
[0x00, 0x00, 0x78, 0x60, 0x78, 0x60, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x06, 0x7E, 0x06, 0x7E, 0x00, 0x00], # 5
[0x00, 0x00, 0x78, 0x18, 0x78, 0x18, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0xF8, 0x1F, 0xF8, 0x1F, 0x00, 0x00], # 6
[0x00, 0x00, 0x00, 0x7E, 0x00, 0x7E, 0x80, 0x61, 0x80, 0x61, 0x7E, 0x60, 0x7E, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00], # 7
[0x00, 0x00, 0x78, 0x1E, 0x78, 0x1E, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x78, 0x1E, 0x78, 0x1E, 0x00, 0x00], # 8
[0x00, 0x00, 0xF8, 0x1F, 0xF8, 0x1F, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x18, 0x1E, 0x18, 0x1E, 0x00, 0x00]  # 9
]

SHAPES_SYMBOLS = [
[0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00], # I
[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], # L
[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], # S
[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x03, 0xC0, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], # Z
[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x03, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], # J
[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], # O
[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00] # T
]

def form_digit_array(digits):
    digit_array = [0] * (SHAPE_AND_NUMBER_SIZE * len(digits))
    for repeat in range(len(digits)):
        for B in range(SHAPE_AND_NUMBER_SIZE):
            digit_array[(repeat * 24) + B] = NUMBERS_SYMBOLS[digits[repeat]][B]
    return digit_array

def update_yellow_screen(score, next_shape):
    yellow_screen = YELLOW_SCREEN_START.copy()
    digits = []
    shape = []
    
    if score < 10:
        digits.append(score)
    elif score >= 10 and score < 100:
        digits.append(score % 10)
        digits.append(score // 10)  
    elif score >= 100 and score < 1000:
        digits.append(score % 10)
        digits.append((score // 10) % 10)
        digits.append(score // 100)
    else:
        digits.append((score // 100) % 10)
        digits.append((score // 10) % 10)
        digits.append(score % 10)
        digits.append(score // 1000)
        
    digit_array = form_digit_array(digits)
    for repeat in range(len(digit_array)):
        yellow_screen[DIGITS_START + repeat] = yellow_screen[DIGITS_START + repeat] + digit_array[repeat]
        
    if next_shape == 'I':
        shape = SHAPES_SYMBOLS[0]
    elif next_shape == 'L':
        shape = SHAPES_SYMBOLS[1]
    elif next_shape == 'S':
        shape = SHAPES_SYMBOLS[2]
    elif next_shape == 'Z':
        shape = SHAPES_SYMBOLS[3]
    elif next_shape == 'J':
        shape = SHAPES_SYMBOLS[4]
    elif next_shape == 'O':
        shape = SHAPES_SYMBOLS[5]
    else:
        shape = SHAPES_SYMBOLS[6]
        
    index = 0
    for B in range(SHAPE_START,SHAPE_END):
        yellow_screen[B] = yellow_screen[B] + shape[index]
        index += 1
        if index == SHAPE_AND_NUMBER_SIZE:
            break
    
    return yellow_screen